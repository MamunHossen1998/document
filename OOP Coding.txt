---------------------------------
প্রোগ্রামিং ভাষায় কনটেক্সট কি ?
---------------------------------
1) একটি ভ্যারিয়েবলের মান:
$x = 10; // গ্লোবাল ভেরিয়েবল

function myFunction() {
    global $x; // গ্লোবাল ভেরিয়েবল অ্যাক্সেস
    echo $x; // 10 আউটপুট করে
}

myFunction();

কনটেক্সট:
	myFunction() ফাংশনের স্কোপ: গ্লোবাল
	$x ভ্যারিয়েবলের মান: 10
প্রভাব:
	myFunction() ফাংশন $x ভ্যারিয়েবলের মান 10 আউটপুট করে।

2) একটি ফাংশনের আর্গুমেন্ট:
function myFunction($y) {
    echo $y;
}

myFunction(20); // 20 আউটপুট করে

কনটেক্সট:
	myFunction() ফাংশনের আর্গুমেন্ট: $y
	$y আর্গুমেন্টের মান: 20
প্রভাব:
	myFunction() ফাংশন $y আর্গুমেন্টের মান 20 আউটপুট করে।

3) একটি ক্লাসের অবস্থা:
class MyClass {
    private $name = 'John Doe';

    public function getName() {
        return $this->name;
    }
}

$myObject = new MyClass();
echo $myObject->getName(); // John Doe আউটপুট করে

কনটেক্সট:
	MyClass ক্লাসের অবজেক্ট: $myObject
	$name প্রাইভেট প্রপার্টির মান: 'John Doe'
প্রভাব:
	getName() মেথড $name প্রপার্টির মান 'John Doe' আউটপুট করে।

---------------------------------
প্রসিডিউরাল প্রোগ্রামিং  কি ?
---------------------------------
ফাংশন: -------------
function greet($name) {
    echo "Hello, $name!";
}

greet('John Doe'); // Hello, John Doe! আউটপুট করে

প্রসিডিউর: -------------
function updateCounter() {
    global $counter;
    $counter++;
}
updateCounter();

echo $counter;

---------------------------------
অবজেক্ট  কি ? 
---------------------------------
1) অবজেক্ট বেসড: ------------- PHP
class Person {
    public $name; // State
    public $age;  // State

    public function sayHello() { // Behaviour
        echo "Hello, my name is " . $this->name . " and I am " . $this->age . " years old.";
    }
}
$person = new Person(); // Identity
$person->name = "John Doe";
$person->age = 30;

$person->sayHello();

2) প্রোটোটাইপ বেসড : ------------- JavaScript
const person = {
    name: "Md Rubel Khan",
    balance: 3000,

    deposit: function(amount) {
       this.name =  this.balance + amount; 
    }
}
const person2 = Object.create(person); // Similer new object and assign to another data 
person2.name = "Shohel Rana";
person2.balance = 50000;

console.log(person.name);
console.log(person2.name);

// ব্যবহারকারীর ইনপুটের উপর ভিত্তি করে গ্রীটিং বার্তা প্রদর্শন করুন
$name = $_GET['name'];
echo "Hello, $name!";

// একটি ফাইল থেকে কনফিগারেশন ডেটা লোড করুন
$config = parse_ini_file('config.ini');
echo "Database host: " . $config['db_host'];

// একটি নতুন ক্লাস তৈরি করুন
class DynamicClass {
    public function __construct($name) {
        $this->name = $name;
    }

    public function getName() {
        return $this->name;
    }
}

$object = new DynamicClass('My Dynamic Object');
echo $object->getName();

------------------------------------------
ইনহেরিটেন্স  কাকে বলে ? 
------------------------------------------
1) Single Inheritance: -------------
class Animal {}
class Dog extends Animal {}

2) Multiple Inheritance (Not Supported Directly): -------------
class Animal {}
class Mammal {}
class Dog extends Animal , Mammal  {}

Trait: -----------
trait TraitA {}
trait TraitB {}

class MyClass {
   use TraitA, TraitB;
}

3) Multilevel Inheritance: -------------
class A{}
class B extends A{}
class C extends B{}

4) Hierarchical Inheritance: -------------
class Shape {}
class Circle extends Shape {}
class Rectangle extends Shape{}

Diamond problem
----------------------------
class Animal {
    public function makeSound() {}
}
class Dog extends Animal {
    public function makeSound() {}
}
class Cat extends Animal {
    public function makeSound() {}
}

class Employee extends Dog, Cat{
    public function makeSound() {}
}
$employee = new Employee();
$employee->makeSound();

উল্লেখ্য: Employee object-এর makeSound() method কোন class থেকে call করা হবে তা স্পষ্ট নয়। 

-----------------------------------
পলিমরফিজম  কি  ?
-----------------------------------
Method Overloading: -------------
class Calculator {
    public function __call($name, $arguments) {
        if ($name === 'multiply') {
            if (count($arguments) === 2) {
                return $this->multiplyTwo($arguments[0], $arguments[1]);
            } 
	    elseif (count($arguments) === 3) {
                return $this->multiplyThree($arguments[0], $arguments[1], $arguments[2]);
            }
        }
        throw new \BadMethodCallException("Method '$name' not found.");
    }
    private function multiplyTwo($x, $y) {
        return $x * $y;
    }
    private function multiplyThree($x, $y, $z) {
        return $x * $y * $z;
    }
}
$calculator = new Calculator();

echo $calculator->add(5, 3) . PHP_EOL; // This will throw an exception because there's no 'add' method
echo $calculator->multiply(2, 3) . PHP_EOL;       // Output: 6
echo $calculator->multiply(2, 3, 4) . PHP_EOL;    // Output: 24

Method Overriding: -------------
class Animal {
  public function makeSound() {
    echo "Generic animal sound\n";
  }
}

class Dog extends Animal {
  public function makeSound() {
    echo "Woof!\n";
  }
}

class Cat extends Animal {
  public function makeSound() {
    echo "Meow!\n";
  }
}

$dog = new Dog();
$dog->makeSound(); // Output: Woof!

$cat = new Cat();
$cat->makeSound(); // Output: Meow!

-----------------------------------
কনক্রিট ক্লাস, অ্যাবস্ট্রাক্ট  ক্লাস এবং ইন্টারফেস কি ? 
-----------------------------------
Abstract: ------------- 
abstract class AbstractClass{
    abstract protected function getName($name);
}
 
class childClass extends AbstractClass{
    public function getName($name) {
        return 'Hi '.$name.' !';
    }
}
$class = new childClass;
echo $class->getName('Rubel'), '\n';

Interface: ------------- 
interface class MyInterface {
  public function aMethod();
  public function anotherMethod();
}

class MyClass implements MyInterface1,...,MyInterfaceN {
  public function aMethod() {}
  public function anotherMethod() {}
}

-----------------------------------
PHP তে কয় ধরনের এক্সেস মডিফায়ার আছে ?
-----------------------------------
class MyClass {
    private $privateProperty = "This is a private property.";

    public function getPrivateProperty() {
        return $this->privateProperty;
    }

    public function setPrivateProperty($value) {
        $this->privateProperty = $value;
    }
}

-----------------------------------
PHP তে ম্যাজিক মেথড গুলো  কি কি ?
-----------------------------------
---------------- __construct() & __destruct() 
class MyClass {
  public function __construct() {
    echo "Object created!\n";
  }

  public function sayHello() {
    echo "Hello from MyClass!\n";
  }

  public function __destruct() {
    echo "Object destroyed!\n";
  }
}

$myObject = new MyClass();
$myObject->sayHello();

unset($myObject); // This will trigger the __destruct() method

---------------- __call() & __callStatic()  
class Calculator {
    public function __call($name, $arguments) {
        if ($name === 'multiply') {
            if (count($arguments) === 2) {
                return $this->multiplyTwo($arguments[0], $arguments[1]);
            } 
	    elseif (count($arguments) === 3) {
                return $this->multiplyThree($arguments[0], $arguments[1], $arguments[2]);
            }
        }
        throw new \BadMethodCallException("Method '$name' not found.");
    }
    private function multiplyTwo($x, $y) {
        return $x * $y;
    }
    private function multiplyThree($x, $y, $z) {
        return $x * $y * $z;
    }
}
$calculator = new Calculator();

echo $calculator->add(5, 3) . PHP_EOL; // This will throw an exception because there's no 'add' method
echo $calculator->multiply(2, 3) . PHP_EOL;       // Output: 6
echo $calculator->multiply(2, 3, 4) . PHP_EOL;    // Output: 24

---------------- __get() & __set()  
class DataHolder {
  private $data = [];

  public function __get($name) {
    if (array_key_exists($name, $this->data)) {
      return $this->data[$name];
    } 
    else {
      throw new Exception("Property '$name' does not exist");
    }
  }
  public function __set($name, $value) {
    $this->data[$name] = $value;
  }
}

$dataHolder = new DataHolder();
$dataHolder->name = "John Doe";
$dataHolder->age = 30;

echo "Name: " . $dataHolder->name; 
echo "Age: " . $dataHolder->age;   

// Accessing non-existent property
echo "City: " . $dataHolder->city; // throws exception

---------------- __invoke() 
class MyClass {
    public function __invoke($param) {
        echo "Object invoked with parameter: $param";
    }
}
$obj = new MyClass();
$obj("Hello");

-----------------------------------
Traits(বৈশিষ্ট্য) কি?
-----------------------------------
class Base{
     public function sayHello(){
         echo "say hello from base";
    }
}
trait trt{
    public function sayHello(){
        echo "say hellow from trait";
    }
}
class Child extends Base{
    use trt;
    public function sayHello(){
        echo "hello from child class";
    }
}
 
$objCls = new Child;
$objCls->sayHello();
/////////  Result
hello from child class 

Traits এর method ওভাররাইডিং  করার  নিয়ম : -------------
trait Greeting {
    public function sayHello() {
        echo "Hello from Greeting trait!\n";
    }
}
trait Farewell {
    public function sayHello() {
        echo "Goodbye from Farewell trait!\n";
    }
}
class MyClass {
    use Greeting, Farewell {
        Greeting::sayHello insteadof Farewell; 
        Farewell::sayHello as sayGoodbye;  
    }
}

$obj = new MyClass();

$obj->sayHello();    // Output: Hello from Greeting trait!
$obj->sayGoodbye();  // Output: Goodbye from Farewell trait!

-----------------------------------
Namespaces (বৈশিষ্ট্য) কি?
-----------------------------------
namespace MyProject\Math;

class Calculator {
    public function add($a, $b) {
        return $a + $b;
    }
}
function multiply($a, $b) {
    return $a * $b;
}
const PI = 3.1416;


$calc = new MyProject\Math\Calculator();
$result1 = $calc->add(5, 3);
echo $result1; // Output: 8

$result2 = MyProject\Math\multiply(2, 4);
echo $result2; // Output: 8

echo MyProject\Math\PI; // Output: 3.1416

---------- The same page can be used in multiple namespace-------
namespace n1{
   class test{
   }
}
namespace n2{
   class test{
   }
}

-----------------------------------
PHP তে মেথড চাইনিং কি?
-----------------------------------
Public method: -------------
class Person{
    private $name="";
    private $age="";
 
    public function setName($name="")
    {
      $this->name=$name;
      return $this;
    }
    public function setAge($age="20")
    {
      $this->age=$age;
      return $this;
    }
    public function getInfo()
    {
      echo "Hello, My name is ".$this->name." and my age is ".$this->age." years.";
    }
}
$person =  new Person();
$person->setName("Rubel")->setAge(50)->getInfo();

Static method: -------------
class Person{
    private static $name="";
    private static $age="";
 
    public static function setName($name="")
    {
       static::$name = $name;
       return new static; 
    }
    public static function setAge($age="20")
    {
       static::$age= $age;
      return new static;   
    }
    public static function getInfo()
    {
      echo "Hello, My name is ".static::$name." and my age is ".static::$age." years.";
    }
}
$person =  new Person();
$person::setName("Rubel")->setAge(33)->getInfo();

-----------------------------------
Dependency Injection কি  ?
-----------------------------------
class Car {
    private $engine;

    public function __construct(Engine $engine) {
        $this->engine = $engine;
    }
    public function start() {
        $this->engine->start();
    }
}
class Engine {
    public function start() {
        echo "Engine started.";
    }
}

$engine = new Engine();
$car = new Car($engine);

$car->start();

----------------------------------
ডিজাইন প্রিন্সিপল কি  ?
----------------------------------
১) Single Responsibility Principle: 

SRP অনুসরণ না করে: -------------
class User {
    public function createUser($data) {}
    public function updateUser($id, $data) {}
    public function deleteUser($id) {}
    // Send Email	
    public function sendWelcomeEmail($email) {} 
    // Create Log 
    public function logGenerate($data) {}
}

SRP অনুসরণ করে: -------------
class User {
    public function createUser($data) {}
    public function updateUser($id, $data) {}
    public function deleteUser($id) {}
}
class Email {
    public function sendEmail($to, $subject, $body) {}
}
class Logger {
    public function log($message) {}
}
class UserController {
    private $user;
    private $email;
    private $logger;

    public function __construct(User $user, Email $email, Logger $logger) {
        $this->user = $user;
        $this->email = $email;
        $this->logger = $logger;
    }

    public function registerUser($data) {
        $this->user->createUser($data);
	// Send Email
        $this->email->sendEmail($to $subject, $body);
	// Create Log 
        $this->logger->log('User registered: ' . $data['name']);
    }
}

২) Open/Closed Principle (OCP):

OCP অনুসরণ না করে: -------------
class Database {
    private $connection;

    public function __construct($host, $username, $password, $database) {
        $this->connection = new mysqli($host, $username, $password, $database);
    }
    public function query($sql) {
        return $this->connection->query($sql);
    }
    public function fetchAll($result) {
        $data = [];
        while ($row = $result->fetch_assoc()) {
            $data[] = $row;
        }
        return $data;
    }
}
class UserController {
    private $db;

    public function __construct(Database $db) {
        $this->db = $db;
    }
    public function getAllUsers() {
        $result = $this->db->query("SELECT * FROM users");
        return $this->db->fetchAll($result);
    }
}
$database = new Database("localhost", "root", "", "my_database");

$userController = new UserController($database);
$users = $userController->getAllUsers();
print_r($users);

এই উদাহরণে, Database ক্লাস নির্দিষ্টভাবে MySQLডাটাবেসের সাথে সংযোগ স্থাপনের জন্য ডিজাইন করা হয়েছে ।  এটি OCP লঙ্ঘন করে কারণ যদি অন্য ডাটাবেস কনন্টেক্ট করার দরকার হয় তখন Database ক্লাসের ইন্টারফেস পরিবর্তন করতে হবে ।

OCP অনুসরণ করে: -------------
interface Database {
    public function connect();
    public function query($sql);
    public function fetchAll();
}
class MySQLDatabase implements Database {
    private $connection;

    public function connect() { MySQL ডাটাবেসের সাথে সংযোগ স্থাপন }
    public function query($sql) { MySQL ডাটাবেসে SQL ক্যোয়ারি চালান }
    public function fetchAll() { MySQL ডাটাবেস থেকে রোডসেট ফেচ }
}
class PostgreSQLDatabase implements Database {
    private $connection;

    public function connect() { PostgreSQL ডাটাবেসের সাথে সংযোগ স্থাপন }
    public function query($sql) { PostgreSQL ডাটাবেসে SQL ক্যোয়ারি চালান }
    public function fetchAll() { PostgreSQL ডাটাবেস থেকে রোডসেট ফেচ }
}
class UserController {
    private $db;

    public function __construct(DatabaseInterface $db) {
        $this->db = $db;
    }
    public function getAllUsers() {
        $result = $this->db->query("SELECT * FROM users");
        return $this->db->fetchAll($result);
    }
}
$mysqlDatabase = new MySQLDatabase();
$mysqlDatabase->connect(); 
 
$userController = new UserController($mysqlDatabase);
$users = $userController->getAllUsers();
print_r($users);


৩) Liskov Substitution Principle:

LSP অনুসরণ না করে: ---------- 
class Animal {
    public function jump() {
        // code for jumping
    }
}
class Elephant extends Animal {
    public function jump() {
        // Elephant can't jump
    }
}

LSP অনুসরণ  করে: ---------- 
abstract class Animal {
    abstract public function eat();
}
class Elephant extends Animal {
    public function eat() {
        // every animal can eat
    }
}
class Tiger extends Animal {
    public function eat() {
        // every animal can eat
    }
}

৪) Interface Segregation Principle (ISP):

ISP অনুসরণ না করে: ---------- 
interface Human {
    public function walk();
    public function swim(); // not everyone can swim
}

ISP অনুসরণ  করে: ---------- 
interface Walkable {
    public function walk();
}

interface Swimmable {
    public function swim();
}

class People implements Walkable, Swimmable {
    public function walk() {
	// walking
    }
    public function swim() {
	// swimming
    }
}

৫) Dependency Inversion Principle (DIP):

DIP অনুসরণ না করে: ---------- 
class Book {
    private $content;

    public function __construct($content) {
        $this->content = $content;
    }
    public function getContent() {
        return $this->content;
    }
}
class Article {
    private $content;

    public function __construct($content) {
        $this->content = $content;
    }
    public function getContent() {
        return $this->content;
    }
}
class Printer {
    public function printContent(Book $book) {
        $content = $book->getContent();
        echo "Printing book content: " . $content . "\n";
    }
    public function printArticleContent(Article $article) {
        $content = $article->getContent();
        echo "Printing article content: " . $content . "\n";
    }
}

এই উদাহরণে, Printer ক্লাস নির্দিষ্ট ক্লাস (Book, Article) উপর নির্ভর করে: printContent() এবং printArticleContent() মেথড নির্দিষ্টভাবে Book এবং Article ক্লাসের উপর নির্ভর করে। এর মানে হল যে Printer ক্লাস কেবলমাত্র এই দুটি ক্লাসের সাথেই কাজ করতে পারে ।

DIP অনুসরণ করে: ---------- 
interface Printable {
    public function getContent(): string;
}
class Book implements Printable {
    private $content;

    public function __construct($content) {
        $this->content = $content;
    }
    public function getContent(): string {
        return $this->content;
    }
}
class Article implements Printable {
    private $content;

    public function __construct($content) {
        $this->content = $content;
    }
    public function getContent(): string {
        return $this->content;
    }
}
class Printer {
    public function printContent(Printable $printable) {
        $content = $printable->getContent();
        echo "Printing content: " . $content . "\n";
    }
}
$book = new Book("This is the book content");
$article = new Article("This is the article content");

$printer = new Printer();
$printer->printContent($book);
$printer->printContent($article);

এই উদাহরণে, Printer ক্লাস নির্দিষ্ট  ক্লাসের উপর নির্ভর করে না: এটি Printable ইন্টারফেসের উপর নির্ভর করে। Book এবং Article ক্লাসগুলো Printable ইন্টারফেস implement করে: এর মানে হল যে তারা "printContent" মেথড ব্যবহার করে যেকোনো Printer ক্লাসের সাথে কাজ করতে পারে। Printer ক্লাস পরিবর্তন করা সহজ: এটি  Book এবং Article ক্লাসের পরিবর্তন করার প্রয়োজন হয় না।

লোয়ার লেভেল ক্লাস: ---------- EmailService
হায়ার লেভেল ক্লাস: ----------  UserService

class EmailService {
    public function sendEmail($email, $message) {
       	 // ইমেইল পাঠানোর লজিক
        echo "Email sent to $email with message: $message";
    }
}
class UserService {
    private $emailService;

    public function __construct() {
        $this->emailService = new EmailService(); // সরাসরি নির্ভরশীলতা
    }

    public function registerUser($email) {
       	 // ইউজার রেজিস্ট্রেশনের লজিক
        $this->emailService->sendEmail($email, "Welcome to our platform!");
    }
}

// ইউজার রেজিস্ট্রেশন
$userService = new UserService();
$userService->registerUser('user@example.com');

------------------------------------
PHP OOP ডিজাইন প্যাটার্ন  কোডিং উদাহরণ ? 
------------------------------------
Singleton Pattern: একটি class-এর শুধুমাত্র একটি instance তৈরি করা যায়।  
-----------------
class Database {

    private static $instance;

    private function __construct() {}

    public static function getInstance() {
        if (!isset(self::$instance)) {
            self::$instance = new Database();
        }
        return self::$instance;
    }

}

$db1 = Database::getInstance();
$db2 = Database::getInstance();

var_dump($db1 === $db2); // true

1) Database class-এর constructor private করা হয়েছে। এটি নিশ্চিত করে যে এই class-এর শুধুমাত্র একটি instance তৈরি করা যাবে।   তাহলে সুবিধা কি ? 
1) getInstance() method static করা হয়েছে। এটি এই method কে class instance তৈরি না করে call করা যায়।
1) getInstance() method প্রথমে check করে যে **$instance variable set করা আছে কিনা। যদি না থাকে, তাহলে এটি একটি নতুন instance তৈরি করে এবং **$instance variable -এ store করে।
1) getInstance() method তারপর $instance variable return করে।

Factory Pattern: objects create করার জন্য একটি generic interface provide করে।
----------------
interface Shape {
    public function draw();
}

class Circle implements Shape {
    public function draw() {
        echo "Drawing a circle...\n";
    }
}

class Square implements Shape {
    public function draw() {
        echo "Drawing a square...\n";
    }
}

class ShapeFactory {
    public static function createShape($type) {
        switch ($type) {
            case "circle":
                return new Circle();
            case "square":
                return new Square();
            default:
                throw new Exception("Invalid shape type");
        }
    }
}

// Usage
$shape = ShapeFactory::createShape("circle");
$shape->draw();

Observer Pattern: objects কে events subscribe করার এবং unsubscribe করার জন্য একটি mechanism provide করে।
-----------------
interface Subject {
    public function attach($observer);
    public function detach($observer);
    public function notify();
}

class ConcreteSubject implements Subject {
    private $observers = array();

    public function attach($observer) {
        $this->observers[] = $observer;
    }
    public function detach($observer) {
        unset($this->observers[array_search($observer, $this->observers)]);
    }
    public function notify() {
        foreach ($this->observers as $observer) {
            $observer->update();
        }
    }
}

interface Observer {
    public function update();
}
class ConcreteObserver implements Observer {
    public function update() {
        echo "Observer notified...\n";
    }
}

// Usage
$subject = new ConcreteSubject();
$observer = new ConcreteObserver();
$subject->attach($observer);
$subject->notify();

Decorator Pattern: objects dynamically modify করার জন্য একটি mechanism provide করে।
------------------
interface Shape {
    public function draw();
}
class Circle implements Shape {
    public function draw() {
        echo "Drawing a circle...\n";
    }
}
class Square implements Shape {
    public function draw() {
        echo "Drawing a square...\n";
    }
}
class ColoredShapeDecorator implements Shape {
    private $shape;
    private $color;

    public function __construct(Shape $shape, $color) {
        $this->shape = $shape;
        $this->color = $color;
    }
    public function draw() {
        echo "Drawing a $color " . $this->shape->draw() . "\n";
    }
}
// Usage
$shape = new Circle();
$coloredShape = new ColoredShapeDecorator($shape, "red");
$coloredShape->draw();


 









---------------------------------------------
কিভাবে অবজেক্ট এর  মধ্যে সম্পর্ক তৈরি করতে হয় ?
---------------------------------------------
1) Inheritance:
-----------------
class Animal {
    public function breathe() {}
}
class Mammal extends Animal {
    public function giveBirth() {}
}

$dog = new Mammal();
echo "{$dog->breathe()}" . PHP_EOL; // "breathes"
echo "{$dog->giveBirth()}" . PHP_EOL; // "gives birth"


2) Association:
--------------------
class Engine {
    public function start() {}
}
class MusicPlayer{
    public function sound() {}
}
class Car {
    private $engine;
    private $player;

    public function __construct(Engine $engine, MusicPlayer $player) {
        $this->engine = $engine;
    }
    public function start() {
        $this->engine->start();
    }
     public function sound() {
        $this->player->sound();
    }
}
$car = new Car(new Engine(), new MusicPlayer());
$car->start();
$car->sound();

 

2) Composition:
---------------------
class Engine {
  private $horsepower;

  public function __construct($horsepower) {
    $this->horsepower = $horsepower;
  }

  public function getHorsepower() {
    return $this->horsepower;
  }
}

class Car {
  private $engine;

  public function __construct(Engine $engine) {
    $this->engine = $engine;
  }

  public function getEngine() {
    return $this->engine;
  }
}

$engine = new Engine(150);
$car = new Car($engine);

echo $car->getEngine()->getHorsepower();

উপরের উদাহরণে:
  Car হলো container class।
  Engine হলো contained class।
  Car Engine-এর objects তৈরি করে এবং তাদের ব্যবহার করে।

3) Aggregation:
---------------------
class Car {
    private $engine;

    public function __construct() {
        $this->engine = new Engine();
    }

    public function startEngine() {
        $this->engine->start();
    }

    public function stopEngine() {
        $this->engine->stop();
    }
}

class Engine {
    public function start() {
        echo "Engine started.";
    }

    public function stop() {
        echo "Engine stopped.";
    }
}

$car = new Car();
$car->startEngine();
$car->stopEngine();


4) Association
---------------------
class Library {
  private $books;

  public function __construct(array $books) {
    $this->books = $books;
  }

  public function addBook(Book $book) {
    $this->books[] = $book;
  }

  public function getBooks() {
    return $this->books;
  }
}

class Book {
  private $title;

  public function __construct($title) {
    $this->title = $title;
  }

  public function getTitle() {
    return $this->title;
  }
}

$book1 = new Book("The Lord of the Rings");
$book2 = new Book("The Hobbit");

$library = new Library([$book1, $book2]);

echo $library->getBooks()[0]->getTitle(); // The Lord of the Rings








