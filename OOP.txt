---------------------------------
প্রোগ্রামিং ভাষায় কনটেক্সট কি ?
---------------------------------
প্রোগ্রামিং ভাষায়, কনটেক্সট বলতে একটি স্পেসিফিক  এনভায়রনমেন্ট বোঝায় যেখানে কোড কীভাবে কাজ করবে, কোথায় ব্যবহৃত হবে, এবং কী ধরনের ডেটা প্রিপায়ার করা হবে ।  কনটেক্সট গুরুত্বপূর্ণ কারণ এটি প্রোগ্রামারদের কোড বুঝতে এবং ডিবাগ করতে সাহায্য করে ।

কনটেক্সটের উদাহরণ:
    একটি ভ্যারিয়েবলের মান
    একটি ফাংশনের আর্গুমেন্ট
    একটি ক্লাসের অবস্থা
    একটি প্রোগ্রামের ইনপুট এবং আউটপুট

---------------------------------
প্রোগ্রামিং ফিলোসফি কি ?
---------------------------------
প্রোগ্রামিং ফিলোসফি হল প্রোগ্রামিং এর প্রিন্সিপল, প্রসিডিউর(পদ্ধতি) এবং টেকনিক(কৌশল) সম্পর্কে স্পষ্ট  ধারণা দেয়,  যে প্রোগ্রামাররা কীভাবে কোড লিখবে এবং কীভাবে সফ্টওয়্যার ডেভেলপমেন্ট করবে । প্রোগ্রামিং ফিলোসফি প্রোগ্রামারদের ভালো কোড লিখতে এবং উন্নত সফ্টওয়্যার ডেভেলপ করতে সাহায্য করে।
 
প্রোগ্রামিং ফিলোসফি-র কিছু উদাহরণ: -----------------
  DRY (Don't Repeat Yourself): কোড  রিউস করা ।
  KISS (Keep It Simple Stupid): কোড যতটা সম্ভব সিম্পল রাখার ।
  SOLID: মেইনটেইনেবল এবং ফ্লেক্সিবল সফ্টওয়্যার তৈরির জন্য SOLID প্রিন্সিপল  ফলো করা ।
  YAGNI (You Ain't Gonna Need It): প্রয়োজন না হওয়া পর্যন্ত কোড না লেখার ।

---------------------------------
প্রোগ্রামিং আইসোলেট কি ?
---------------------------------
প্রোগ্রামিং আইসোলেট হলো একটি প্রোগ্রামিং টেকনিক যেখানে একটি কোডকে নির্দিষ্ট স্কোপের মধ্যে আইসোলেট করে এবং অন্য কোডের সাথে ইন্টারঅ্যাকশন প্রিভেন্ট করে ।

প্রোগ্রামিং আইসোলেট ব্যবহারের কারণ: -----------------
  Modularity: কোডকে  মডিউল করে, মেইনটেইনএবল এবং টেস্টএবল করে তোলে।
  Security: বাগ এবং সিকিউরিটি ভারনারেবিলিটির রিস্ক কমিয়ে দেয় ।

প্রোগ্রামিং আইসোলেট তৈরি করার বিভিন্ন উপায়: -----------------
  Function: ফাংশনের  মাধ্যমে কোডকে আইসোলেট করা যায় । একটি বেসিক ওয়ে ।
  Class: ক্লাসের  মাধ্যমে কোডকে  আইসোলেট করা যায় । একটি পাওয়ারফুল ওয়ে ।
  Module: মডিউল মাধ্যমে বড় ধরণের অ্যাপ্লিকেশনের  কোডকে আইসোলেট করা যায় ।

---------------------------------
প্রোগ্রামিং প্যারাডাইম(দৃষ্টান্ত)  কি ?
---------------------------------
প্রোগ্রামিং প্যারাডাইম হল প্রোগ্রাম লেখার উপায় । অর্থাৎ এটি নির্ধারণ করে যে প্রোগ্রাম কিভাবে লিখতে হবে এবং কীভাবে কাজ করে । 

বিভিন্ন ধরণের প্রোগ্রামিং প্যারাডাইম রয়েছে: -----------------  
    ইম্পারেটিভ প্রোগ্রামিং: এটি সবচেয়ে সাধারণ প্রোগ্রামিং প্যারাডাইম। এটি প্রোগ্রামার-কে নির্দেশ দেয় কিভাবে একটি নির্দিষ্ট কার্য সম্পাদন করতে হবে। C, C++, Java, Python
    ডিক্লরেটিভ প্রোগ্রামিং: এটি প্রোগ্রামার-কে নির্দেশ দেয় কিভাবে একটি নির্দিষ্ট কার্য সম্পাদন করার জন্য ডেটা কে সংগঠিত করতে হবে। SQL, Prolog
    প্রসিডিউরাল প্রোগ্রামিং:   এটি প্রোগ্রামার-কে নির্দেশ দেয় কিভাবে একটি নির্দিষ্ট কার্য সম্পাদন করার জন্য ফাংশন গুলো কে সংযুক্ত করতে হবে। Haskell, Lisp
    অবজেক্ট ওরিয়েন্টেড প্রোগ্রামিং: এটি প্রোগ্রামার-কে নির্দেশ দেয় কিভাবে একটি নির্দিষ্ট কার্য সম্পাদন করার জন্য অবজেক্ট গুলো কে ব্যবহার করতে হবে। Java, C++, Python

PHP প্রোগ্রামিং প্যারাডাইম: -----------------
PHP একটি মাল্টি-প্যারাডাইম প্রোগ্রামিং ল্যাংগুয়েজ, যার মানে বিভিন্ন প্রোগ্রামিং প্যারাডাইম ব্যবহার করে প্রোগ্রাম লেখ যায় । PHP তে নির্দিষ্ট কোন প্রোগ্রামিং প্যারাডাইম নেই । প্রোগ্রামার তাদের প্রয়োজন অনুযায়ী প্যারাডাইম গুলো নির্বাচন করতে পারে।

PHP এর সবচেয়ে সাধারণ প্রোগ্রামিং প্যারাডাইম হল: -----------------
প্রসিডিউরাল প্রোগ্রামিং: ফাংশন এবং প্রসিডিউর ব্যবহার করে প্রোগ্রাম লেখা হয় । 
অবজেক্ট ওরিয়েন্টেড প্রোগ্রামিং: অবজেক্ট এবং ক্লাস ব্যবহার করে প্রোগ্রাম লেখা হয় ।

---------------------------------
প্রসিডিউরাল প্রোগ্রামিং  কি ?
---------------------------------
প্রসিডিউরাল প্রোগ্রামিং হলো এক ধরণের প্রোগ্রামিং প্যারাডাইম যেখানে ফাংশন এবং  প্রসিডিউর ব্যবহার করে প্রোগ্রাম লেখা হয় ।

ফাংশন: একটি নির্দিষ্ট কার্য সম্পাদন করে। একটি বা ততোধিক ইনপুট প্যারামিটার গ্রহণ করতে পারে । একটি আউটপুট ভ্যালু রিটার্ন করতে পারে ।
প্রসিডিউর: একটি নির্দিষ্ট কার্য সম্পাদন করে। একটি বা ততোধিক ইনপুট প্যারামিটার গ্রহণ করতে পারে । কোন আউটপুট ভ্যালু রিটার্ন করতে পারে না ।

সুবিধা: ----------------- 
     প্রসিডিউরাল প্রোগ্রামিং শেখা এবং বোঝা সহজ ।
     প্রসিডিউরাল প্রোগ্রামগুলি দ্রুত রান হয় ।

অসুবিধা: -----------------
     প্রসিডিউরাল কোড প্রায়শই রিউস করা কঠিন ।
     বড় প্রজেক্টের ক্ষেত্রে প্রসিডিউরাল কোড বোঝা কঠিন হতে পারে ।
     প্রসিডিউরাল প্রোগ্রামগুলি বড় এবং জটিল প্রজেক্টের জন্য স্কেল করা কঠিন হতে পারে ।  
  
---------------------------------
অবজেক্ট ওরিয়েন্টেড প্রোগ্রামিং  কি ?
---------------------------------
অবজেক্ট ওরিয়েন্টেড প্রোগ্রামিং হলো এক ধরণের প্রোগ্রামিং প্যারাডাইম যেখানে মেথড এবং প্রপার্টিকে অবজেক্ট এর মধ্যে অর্গানাইজ করে প্রোগ্রাম লেখা হয় ।

সুবিধা: -----------------  
      কোড চেঞ্জ করা সহজ ।
     কোড রিইউজ করা সহজ ।
     নতুন ফিচারস যোগ করা সহজ ।   

অসুবিধা: -----------------
  OOP এর কন্সেপ্টস গুলো শেখা জটিল হতে পারে ।
  OOP তে প্রোগ্রামিং করলে সাধারণত বেশি মেমরি ব্যবহার হয় ।
 
---------------------------------------
প্রসিডিউরাল প্রোগ্রামিং  VS অবজেক্ট ওরিয়েন্টেড প্রোগ্রামিং ?
---------------------------------------
১) প্রসিডিউরাল প্রোগ্রামিং এ প্রসিডিউর  গুলো গ্লোবাললি  এক্সেসিবল, ফলে সহজে এক্সেস করা যায় ।  এখানে ডাটা হাইড নিয়ে  কাজ করা যায় না । 
২) অবজেক্ট ওরিয়েন্টেড প্রোগ্রামিং এ একটা ক্লাস এর আন্ডারে মেথড  এবং প্রপার্টি গুলো একত্রিত করা থাকে, ফলে সহজে এক্সেস করা যায় না । এখানে ডাটা হাইড নিয়ে কাজ করা যায় ।     

---------------------------------
ক্লাস  কি ?
---------------------------------
১) ক্লাস হল একটি  টেম্পলেট বা বুলুপ্রিন্ট যা অবজেক্ট তৈরির জন্য ব্যবহৃত হয় । 
২) ক্লাস অবজেক্টের স্ট্রাকচার (মেথড  এবং প্রপার্টি) এবং কাস্টম টাইপ নির্ধারণ করে ।   
৩) ক্লাস হল একটা স্ট্রাকচার (মেথড  এবং প্রপার্টি) যেখানে স্পেসিফিক টাইপের  একটা অবজেক্টে ক্রিয়েট  করি । 

---------------------------------
অবজেক্ট  কি ? 
---------------------------------
অবজেক্ট হল ক্লাসের ইনস্ট্যান্স, যা স্পেসিফিক মেথড  এবং প্রপার্টি ধারণ করে ।

অবজেক্টকে প্রেসেন্ট করতে ৩ টি জিনিস লাগে: ----------------- 
১) স্টেট: অবজেক্টের ডাটা বা প্রপার্টি কে রিপ্রেজেন্ট করে ।   
২) বিহেভিয়ার: অবজেক্টের অ্যাকশন বা মেথডকে রিপ্রেজেন্ট করে ।  
৩) আইডেন্টিটি: অবজেক্টেকে ইউনিক করে তোলে । আইডেন্টিটি অন্যান্য অবজেক্ট থেকে একটি নির্দিষ্ট অবজেক্ট কে আলাদা করতে ব্যবহৃত হয়।

অবজেক্ট ক্রিয়েট করার দুটি উপায়: ----------------- 
১) ক্লাস বেসড (অবজেক্ট  বেসড): এটি পদ্ধতিটি জাভা, পিএইচপি এবং পাইথনের মতো ভাষায় ব্যবহৃত হয় ।
২) প্রোটোটাইপ বেসড:  এই পদ্ধতিটি জাভাস্ক্রিপ্টের মতো ভাষায় ব্যবহৃত হয় ।

ক্লাস বেসড এবং প্রোটোটাইপ বেসড মধ্যে নির্বাচন করা: ----------------- 
১)  ডেটা সিকিউরিটি এবং ইনহেরিটেন্স এর জন্য ক্লাস বেসড ।
২) ফ্লেক্সিবল এবং ডাইনামিক কোড এর জন্য প্রোটোটাইপ বেসড ।

-----------------------------------
ক্লাস প্রয়োজনীয়তা কেন ?
-----------------------------------
প্রোটোটাইপ বেসড প্রোগ্রামিং ক্ষেত্রে কোন নির্দিষ্ট স্ট্রাকচার ছাড়াই অবজেক্ট ক্রিয়েট করা যায় । অন্যদিকে, অবজেক্ট বেসড প্রোগ্রামিং ক্ষেত্রে অবজেক্ট তৈরি করার জন্য  প্রথমে একটি স্ট্রাকচার নির্ধারণ করতে হয় যেখানে মেথড  এবং প্রপার্টি গুলো থাকবে । এই স্ট্রাকচার কে ক্লাস বলা হয়, যার উপর বেস করে একটা অবজেক্টে ক্রিয়েট করা হয় ।

-----------------------------------
অবজেক্ট ওরিয়েন্টেড প্রোগ্রামিং ফান্ডামেন্টাল কয়টা ?
-----------------------------------
অবজেক্ট ওরিয়েন্টেড প্রোগ্রামিং এর ফান্ডামেন্টাল চারটি: ----------------- 
১) অ্যাবস্ট্রাকশন  
২) এনক্যাপসুলেশন 
৩) ইনহেরিটেন্স  
৪) পলিমরফিজম 
 
অনেকের মতে অ্যাবস্ট্রাকশন  একটা জেনেরিক কনসেপ্ট । এই কারণ অনেকে অ্যাবস্ট্রাকশনকে OOP ফান্ডামেন্টাল বলে না।  

---------------------------------
অ্যাবস্ট্রাকশন  কি ?
---------------------------------
অ্যাবস্ট্রাকশন হল  ডিজাইন ফিলোসফি বা ডিজাইন আইডিয়ার। অর্থাৎ  কনটেক্সট উপর বেস করে যখন কোনো ক্লাস ডিজাইন করি তখন ঐ ক্লাসে কি কি মেথড এবং প্রপার্টি থাকবে এবং কতটুকু রিপ্রেসেন্ট করবে বা কতটুকু  এক্সপোস করবে এই  ডিজাইন ফিলোসফি বা ডিজাইন আইডিয়ার হল অ্যাবস্ট্রাকশন । অ্যাবস্ট্রাকশন  আননেসেসারি  ইমপ্লিমেন্টেশন হাইড এবং শুধুমাত্র প্রয়োজনীয় ফাংশনালিটি  শো/এক্সপোস করার  ধারণা দেয় ।  

উদাহরণ: ----------
১) একটি রিয়েল লাইফ এক্সাম্পল হল গাড়ি।  যখন আমরা গাড়ি চালাই, আমরা ইঞ্জিন, গ্যাস সিস্টেম, ব্রেক সিস্টেম ইত্যাদির কীভাবে কাজ তা  সম্পর্কে চিন্তা করি না। আমরা শুধুমাত্র গাড়ি চালানোর ধারণা রাখি, গাড়ির নকশা এই কমপ্লেক্স গুলিকে অ্যাবস্ট্রাক্ট করে, যাতে আমরা সহজেই গাড়ি চালাতে পারি।

২) একটি মানচিত্র হলো একটি রিয়েল ওয়ার্ল্ড অবস্ট্রাকশন। এটি রিয়েল ওয়ার্ল্ড এর সব বিবরণ দেয় না, শুধুমাত্র গুরুত্বপূর্ণ বিষয় যেমন রাস্তাঘাট, নদী, এবং ভবন গুলোর সম্পর্কে ধারণা দেয়।  

সুবিধা: ----------
 অ্যাবস্ট্রাকশন কোডের মূল কনসেপ্টগুলিকে ক্লিয়ার করে তোলে, ফলে কোডিং কমপ্লেক্সিটি কমে যায়।  
 আননেসেসারি ইমপ্লিমেন্টেশন ডিটেলস  হাইড করে।

অসুবিধা: ----------
কমপ্লেক্স কনসেপ্টগুলির জন্য অ্যাবস্ট্রাকশন বাস্তবায়ন করা কঠিন হতে পারে।
অতিরিক্ত অ্যাবস্ট্রাকশন কোডকে অস্পষ্ট এবং বোঝার কঠিন করে তুলতে পারে, যার ফলে দক্ষতা হ্রাস পায়।

-----------------------------------
এনক্যাপসুলেশন কি ?
-----------------------------------
এনক্যাপসুলেশন বলতে কোনো কিছু  আবদ্ধ অবস্থায় রাখাকে বোঝায় । অর্থাৎ একটা ক্লাসের মধ্যে মেথড  এবং  প্রপার্টি  গুলোকে আবদ্ধ অবস্থায় রাখার প্রক্রিয়াকে এনক্যাপসুলেশন বলে । এনক্যাপসুলেশনের মাধ্যমে  ক্লাসের বাইরে থেকে ক্লাসের মেথড এবং প্রপার্টি গুলোকে সরাসরি অ্যাক্সেস প্রিভেন্ট করা যায় ।  এক্সেস মডিফায়ার ব্যবহার করে এনক্যাপসুলেট করা হয় । 

সুবিধা: ----------
১)  ডেটা সিকিউরিটি প্রোভাইড করে । 
২)  ক্লাসের মধ্যে মেথড এবং প্রপার্টি গুলো (এক্সেস মডিফায়ার ব্যবহার করে ) কন্ট্রোল করা যায় ।

অসুবিধা: ----------
১) অতিরিক্ত এনক্যাপসুলেশন ফলে কোড বোঝা কঠিন হতে পারে ।
২) এনক্যাপসুলেশন ফলে ডিবাগিং করা জটিল হতে পারে কারণ প্রাইভেট মেথড  এবং প্রপার্টি গুলো সরাসরি অ্যাক্সেস করা যায় না ।

-----------------------------------
অ্যাবস্ট্রাকশন  এবং এনক্যাপসুলেশন মধ্যে পার্থক্য কি ?
-----------------------------------
অ্যাবস্ট্রাকশন: কনটেক্সট উপর বেস করে যখন কোনো ক্লাস ডিজাইন করি তখন ঐ ক্লাসে কি কি মেথড এবং প্রপার্টি থাকবে এবং কতটুকু রিপ্রেসেন্ট করবে বা কতটুকু  এক্সপোস করবে এই  ডিজাইন ফিলোসফি বা ডিজাইন আইডিয়ার হল অ্যাবস্ট্রাকশন ।

এনক্যাপসুলেশন: অ্যাবস্ট্রাকশন উপর বেস করে যখন কোনো ক্লাসটা ইমপ্লিমেন্টেশন করি তখন ঐ ক্লাসে কি কি মেথড এবং প্রপার্টি রিপ্রেসেন্ট করবো বা এক্সপোস করবো তা এনক্যাপসুলেশন মাধ্যমে করা হয় ।  

-----------------------------------
ইনহেরিটেন্স  কাকে বলে ? 
-----------------------------------
যখন একটি ক্লাসের মেথড এবং প্রপার্টি  ইনহেরিট অন্য একটি ক্লাসে ব্যবহার করা হয় তাকে ইনহেরিটেন্স বলে । ইনহেরিট করা জন্য extends কীওয়ার্ড ব্যবহার করা হয় । ইনহেরিট করার সময় IS-A রিলেশনশিপ ফলো করা উচিত । 

ইনহেরিটেন্স আসলো দুইটা কারণে: ----------
১)  কোড রিইউজ করার জন্য ।
২)  হায়ারার্কিক্যাল রিলেশন ইনহেরিটেন্স দিয়ে বোঝানোর সহজ ।

ইনহেরিটেন্স  চার ধরণের : ----------

১) সিঙ্গেল ইনহেরিটেন্স: যখন একটি ক্লাস শুধুমাত্র একটি ক্লাসকে ইনহেরিট করে তাকে সিঙ্গেল ইনহেরিটেন্স বলে । 

২) মাল্টিপল ইনহেরিটেন্স: যখন একটি  ক্লাস একাধিক ক্লাসকে ইনহেরিট করে তাকে মাল্টিপল ইনহেরিটেন্স বলে । PHP তে মাল্টিপল ইনহেরিটেন্স সাপোর্ট নয় । PHP তে মাল্টিপল ইনহেরিটেন্স এর সীমাবদ্ধতা দূর করার জন্য Trait ব্যবহার করা হয় । মাল্টিপল ইনহেরিটেন্স সাপোর্ট না করার কারণ হলো একাধিক প্যারেন্ট ক্লাসে যদি এই নাম মেথড থাকলে তাহলে চাইল্ড ক্লাস কোনটা মেথড ব্যবহার করবে কনফিউস ক্রিয়েট হয় ।

৩) মাল্টিলেভেল ইনহেরিটেন্স: ধরি A, B, C তিন টা ক্লাস , যখন B ক্লাস A কে এবং  C ক্লাস B কে ইনহেরিট করে তাকে  মাল্টিলেভেল ইনহেরিটেন্স বলে ।

৪) হায়ারার্কিক্যাল ইনহেরিটেন্স: যখন একটি ক্লাসের একাধিক চাইল্ড  ক্লাস থাকে তাকে হায়ারার্কিক্যাল ইনহেরিটেন্স বলে । হায়ারার্কিক্যাল ইনহেরিটেন্স এর সীমাবদ্ধতা হলো ডায়মন্ড প্রবলেম হতে পারে।

অসুবিধা: ----------
১) প্যারেন্ট ক্লাসে পাবলিক মেথড বা প্রপার্টি গুলো চাইল্ড ক্লাস চাইলোও প্রাইভেট করতে পারবে না । 
২) যেহেতু চাইল্ড ক্লাস প্যারেন্ট ক্লাস কে এক্সটেন্ড করে, তাই চাইল্ড ক্লাস চাইলে প্যারেন্ট ক্লাসে একসেসবলে মেথড এবং প্রপার্টি গুলো ওভাররাইট করতে পারে।  যার ফলে এনক্যাপসুলেশনের এর প্রাইমারি কনসেপ্ট ব্রেক  করে । 

-----------------------------------
পলিমরফিজম  কি  ?
-----------------------------------
পলিমরফিজম অর্থ হলো বহুরূপি । দুটি ধরণের পলিমরফিজম রয়েছে: ----------  
১) স্ট্যাটিক বা কম্পাইল-টাইম পলিমরফিজম (মেথড ওভারলোডিং) ।
২) ডাইনামিক বা রান-টাইম পলিমরফিজম (মেথড ওভাররাইডিং) ।
 
১) মেথড ওভারলোডিং: যখন একটি ক্লাসে একই নামের একাধিক মেথড  ভিন্ন ভিন্ন প্যারামিটার  উপর বেস করে কাজ করে তাকে মেথড ওভারলোডিং বলে । PHP মেথড ওভারলোডিং সমর্থন করে, তবে অন্যান্য ল্যাঙ্গুয়েজের মত ওভারলোডিং সমর্থন করে না (যেমন, java বা C++)।  PHP-তে মেথড ওভারলোডিং করার জন্য  ম্যাজিক মেথড __call বা __callStatic মেথড ব্যবহার করা হয় ।

২) মেথড ওভাররাইডিং: যখন কোনো চাইল্ড ক্লাস প্যারেন্ট ক্লাসের মেথডেকে ওভাররাইড করে তাকে মেথড ওভাররাইডিং বলে  । এক্ষেত্ৰ চাইল্ড ক্লাসের মেথডেকে প্রায়রিটি বেশি । PHP মেথড ওভাররাইডিং সাপোর্ট করে । 

-----------------------------------
কনক্রিট ক্লাস, অ্যাবস্ট্রাক্ট  ক্লাস এবং ইন্টারফেস কি ? 
-----------------------------------
কনক্রিট ক্লাস: নরমালি আমরা যে ক্লাস তৈরি করি তা হলো কনক্রিট ক্লাস । কনক্রিট ক্লাসে  অবজেক্ট তৈরি করা যায় এবং সবগুলো মেথডের ইমপ্লিমেন্টেশন থাকে ।

অ্যাবস্ট্রাক্ট  ক্লাস: যখন কোনো ক্লাসকে অ্যাবস্ট্রাক্ট কীওয়ার্ড দিয়ে ডিক্লেয়ার করা হয় তাকে অ্যাবস্ট্রাক্ট  ক্লাস বলে । যখন আমরা কোনও ক্লাস ইমপ্লিমেন্টেশন করি তখন কখনও কখনও আমাদের এমন সিচুয়েশন মধ্যে পড়তে হয় ক্লাসের সবগুলো মেথডের ইমপ্লিমেন্টেশন করা সম্ভব হয় না । এই ক্ষেত্রে একটি ক্লাসকে অ্যাবস্ট্রাক্ট হিসাবে ঘোষণা করি । যখন কোনো ক্লাস অ্যাবস্ট্রাক্ট ক্লাসকে এক্সটেন্ড করে তখন উক্ত  ক্লাস তার মত করে মেথডের ইমপ্লিমেন্টেশন  করবে । ইনহেরিট করা জন্য extends কীওয়ার্ড ব্যবহার করা হয় । উদাহরণ, একাউন্ট ক্লাস, উইথড্র সিস্টেম ব্যাংক অনুযায়ী ভিন্ন ।  

সীমাবদ্ধতাগুলো: ----------
১) অ্যাবস্ট্রাক্ট  ক্লাসে অবজেক্ট তৈরি  করা যায় না ।
২) অ্যাবস্ট্রাক্ট  ক্লাসে প্রাইভেট ডিক্লেয়ার করা যায় না । 
৩) অ্যাবস্ট্রাক্ট  ক্লাসে কমপক্ষে একটি অ্যাবস্ট্রাক্ট  মেথড থাকবে । অ্যাবস্ট্রাক্ট  মেথড এর বডি থাকে না ।
৪) অ্যাবস্ট্রাক্ট  ক্লাসে অ্যাবস্ট্রাক্ট  মেথড গুলো চাইল্ড ক্লাসে ডিক্লেয়ার করতে হয় ।

ইন্টারফেস: যখন কোনো ক্লাসকে ইন্টারফেস কীওয়ার্ড দিয়ে ডিক্লেয়ার করা হয় তাকে ইন্টারফেস ক্লাস বলে । ইন্টারফেস হল একটি  কনট্রাক্ট । যখন একটি ক্লাস ইন্টারফেসকে ইমপ্লিমেন্ট করবে, তখন উক্ত ক্লাস ইন্টারফেসের নির্দিষ্ট মেথডগুলি ইমপ্লিমেন্ট  করবে । ইন্টারফেস ক্লাসে মেথডের ইমপ্লিমেন্টেশন থাকে না । যখন কোনো ক্লাস ইন্টারফেস ক্লাসকে এক্সটেন্ড করবে তখন উক্ত  ক্লাস তার মত করে মেথডের ইমপ্লিমেন্টেশন  করবে । ইনহেরিট করা জন্য implements কীওয়ার্ড ব্যবহার করা হয় । বড় কোনো ইন্টারফেস তৈরি করবো না, যাতে চাইল্ড ক্লাসে আননেসেসারি রেস্পন্সিবিলিটি লোড তৈরি হয় । 

কয়েকটি গুরুত্বপূর্ণ পয়েন্ট: ----------
১) ইন্টারফেস মেথড গুলো শুধুমাত্র  signature (নাম, রিটার্ন টাইপ, প্যারামিটার) প্রোভাইড করে। 
২) ইন্টারফেস ডিপেন্ডেন্সি ইনভার্শন প্রিন্সিপল অনুসরণ করতে সহায়তা করে। ক্লাসগুলো নির্দিষ্ট ক্লাসের উপর নির্ভর করে না, বরং ইন্টারফেসের উপর নির্ভর করে।
৩) ইন্টারফেস মূলত কোডের নির্দিষ্ট স্ট্রাকচার এবং বিহেভিয়ার নিশ্চিত করতে ব্যবহৃত হয়, যাতে বিভিন্ন ক্লাসের মধ্যে সামঞ্জস্য বজায় থাকে এবং নির্দিষ্ট কার্যকারিতা নিশ্চিত হয়।

ইন্টারফেস  সীমাবদ্ধতাগুলো: ----------
১) ইন্টারফেস ক্লাসের অবজেক্ট তৈরি  করা যায় না ।
২) ইন্টারফেস ক্লাসের এর সবগুলো  মেথড বাই ডিফল্ট অ্যাবস্ট্রাক্ট । 
৩) ইন্টারফেসকে ক্লাসের প্রাইভেট , প্রোটেক্টেড ডিক্লেয়ার করা যায় না ।  
৪) ইন্টারফেসকে ক্লাসকে ইমপ্লিমেন্ট করতে পারে । মাল্টিপল ইন্টারফেস ক্লাসকে ইমপ্লিমেন্ট করা যায় ।

----------------------------------------------
এক্সেস মডিফায়ার কি ?
----------------------------------------------
এক্সেস মডিফায়ার হল একটি কীওয়ার্ড যা একটি ক্লাসের মেথড বা প্রপার্টির এক্সেস নির্ধারণ করে । 

তিনটি ধরনের এক্সেস মডিফায়ার আছে: ---------- 
Public: ক্লাসের মধ্যে যে সকল মেথড এবং প্রপার্টি কে অবজেক্ট ক্রিয়েট করে এবং  চাইল্ড  ক্লাসে এক্সেস দিতে চাইলে পাবলিক ডিক্লেয়ার করতে হয় ।
Protected: ক্লাসের মধ্যে যে সকল মেথড এবং প্রপার্টি কে শুধুমাত্র  চাইল্ড  ক্লাসে এক্সেস দিতে চাইলে প্রোটেক্টেড ডিক্লেয়ার করতে হয় ।  অবজেক্ট ক্রিয়েট করে এক্সেস করা যায় না ।
Private: ক্লাসের মধ্যে যে সকল  মেথড এবং প্রপার্টি কে  শুধুমাত্র  ঐ ক্লাসের মধ্যে সীমাবদ্ধ রাখতে চাইলে প্রাইভেট ডিক্লেয়ার করতে হয় ।  গেটার এবং সেটার মেথড ব্যবহার করে ভ্যালু গেট  এবং  সেট করা যায় । 

-------------------------------------------------
Static, This, Self & Parent কীওয়ার্ড কেন  ব্যবহার করা হয় ?
-------------------------------------------------
This: $this হলো  সুডো ভ্যারিয়েবল, এটি কারেন্ট ক্লাসের অবজেক্টকে রেফার করে । নন-স্ট্যাটিক মেথড এবং প্রপার্টিকে ক্লাসের মধ্যে কল করতে চাইলে  $this কীওয়ার্ড  ব্যবহার করা হয়।

Static: ক্লাসের মধ্যে যে সকল মেথড এবং প্রপার্টি  অবজেক্ট ক্রিয়েট ছাড়া সরাসরি ক্লাস দিয়ে এক্সেস করতে চাইলে স্ট্যাটিক কীওয়ার্ড ব্যবহার করা হয় ।  স্ট্যাটিক মেথড এবং প্রপার্টিকে ক্লাসের  ভিতরে অথবা বাহিরে কল করার জন্য স্কোপ রিসোলিউশন অপারেটর(::) ব্যবহার করা হয় ।  স্ট্যাটিক মেথড শুধু মাত্র স্ট্যাটিক প্রপার্টি এবং কনস্ট্যান্ট কে কল করতে পারবে ।  

Self & Parent: সেলফ কীওয়ার্ড কারেন্ট ক্লাসকে  এবং প্যারেন্ট কীওয়ার্ড চাইল্ড ক্লাস এর প্যারেন্ট ক্লাসকে রিপ্রেসেন্ট করে । সেলফ এবং প্যারেন্ট কীওয়ার্ড দিয়ে ভ্যালু সেট করা যায় না । স্ট্যাটিক এবং নন-স্ট্যাটিক উভয় ধরনের মেথড এবং প্রপার্টিকে কল করা যায়  ।  

উদাহরণ:  ----------
self::MY_CONSTANT;   self::$myProperty;   self::myMethod();  
parent::MY_CONSTANT; parent::$myProperty; parent::myMethod(); 

-----------------------------------
PHP তে ম্যাজিক মেথড গুলো  কি কি ?
-----------------------------------
__construct() & __destruct(): নতুন  কোনো অবজেক্ট ক্রিয়েট করলে ক্লাসের মধ্যে যে মেথডটি সবার আগে এক্সেকিউট হয়, তাকে  ___কন্সট্রাক্টর বলে এবং অবজেক্টর কাজ শেষ হওয়ার পর ক্লাসের মধ্যে যে মেথডটি  সবার পর এক্সেকিউট হয়, তাকে  ___ডেস্ট্রাক্টর বলে ।

__call() & __callStatic(): যখন  কোনো নন-এক্সিস্ট  বা  ইনএক্সেসিবল মেথডকে এক্সেস করার জন্য কল করা  হয় তখন  ___কল বা  __কালস্ট্যাটিক  মেথড এক্সেকিউট হয় । এখানে নন-স্ট্যাটিক মেথডের জন্য  ___কল  মেথড এবং  স্ট্যাটিক মেথডের  জন্য  __কালস্ট্যাটিক মেথড এক্সেকিউট হয় । মেথডগুলো  দুটি পারমিটার একসেপ্ট করে ফার্স্ট পারমিটের মেথডের নাম এবং সেকেন্ড পারমিটের আর্গুমেন্ট এর একটি অ্যারে গ্রহণ করে । ___কল  এবং   ____কালস্ট্যাটিক মেথড দুটি  মেথড ওভারলোডিং এর সময় ব্যবহার করা হয়  ।  

__get() & __set(): যখন  কোনো নন-এক্সিস্ট বা  ইনএক্সেসিবল প্রপার্টির ভ্যালু এক্সেস করার জন্য কল করা হয় তখন __গেট  মেথড এবং প্রপার্টির ভ্যালু  সেট করার জন্য কল করা হয় তখন __সেট  মেথড এক্সেকিউট হয়  । __সেট  মেথড দুটি পারমিটার একসেপ্ট করে ফার্স্ট পারমিটের প্রপার্টির  নাম  এবং সেকেন্ড পারমিটের  প্রপার্টির  ভ্যালু  একসেপ্ট করে । __গেট   মেথড শুধুমাত্র  প্রপার্টির  নাম  একসেপ্ট করে ।

__invoke(): যখন একটি অবজেক্টকে একটি ফাংশন হিসাবে বিবেচনা করা হয় তখন  ইনভোক মেথড ব্যবহার করা হয় ।  

-----------------------------------
ট্রেইট  কি?
-----------------------------------
PHP তে মাল্টিপল ইনহেরিটেন্স সাপোর্ট করে না ।  এই সীমাবদ্ধতা দূর করার ট্রেইট ব্যবহার করা হয় । ট্রেইট  PHP 5.4 এ প্রথম ব্যবহার করা হয় । ট্রেইট অনেকটা ক্লাসের মতোই, ট্রেইট কে ডিফাইন করা হয় জন্য   trait কিওয়ার্ডটি ব্যবহার  করা হয় । তবে  ক্লাসের মত অবজেক্ট ক্রিয়েট করা যায় না । 
 
নোট: যদি ট্রেইট , প্যারেন্ট ক্লাস এবং চাইল্ড ক্লাসে একই নামের মেথড থাকলে , তখন প্রথমে চাইল্ড ক্লাস , তারপর ট্রেইট , তারপর প্যারেন্ট ক্লাসে মেথড এক্সেকিউট হয় । 

-----------------------------------
নেমস্পেস  কি?
-----------------------------------
নেমস্পেস হল একটি কনভেনশন ।  বিভিন্ন নেমস্পেস ব্যবহার করে একই নামের ক্লাস এবং মেথড ডিফাইন করা যায়, ফলে নামের কনফ্লিক্ট হয় না । নেমস্পেস ব্যবহার করে এলিমেন্ট গুলো অ্যাক্সেস করা যায় । 

-----------------------------------
PHP তে মেথড চাইনিং কি ?
-----------------------------------
ধরি, একটা ক্লাসে  তিনটা মেথড আছে । এখন প্রতিটি মেথডকে এক্সেস করার জন্য আলাদা আলাদা ভাবে অবজেক্ট ক্রিয়েট না করে একটি অবজেক্ট দিয়ে কল করার পদ্ধতিকে মেথড চাইনিং বলে ।  

-----------------------------------
ডিপেন্ডেন্সি ইনজেকশন কি  ?
-----------------------------------
যখন  একটি ক্লাস তার প্রয়োজনীয় অবজেক্ট নিজে তৈরি করে না বরং অন্য ক্লাস তাকে প্রয়োজনীয় অবজেক্ট প্রদান করে তাকে ডিপেন্ডেন্সি ইনজেকশন বলে। 

-------------------------------------------------
কিভাবে অবজেক্ট ওরিয়েন্টেড প্রোগ্রামিং এ স্ট্যান্ডার্ড মানের কোড লেখা যায়  ?
-------------------------------------------------
১) OOP এর বেসিক কন্সেপ্ট গুলো বুঝা: ক্লাস, অবজেক্ট, ইনহেরিট্যান্স, পলিমরফিজম, এনক্যাপসুলেশন ইত্যাদি  OOP এর মৌলিক ধারণা গুলো ভালোভাবে বুঝা ।

২) OOP এর ডিজাইন প্রিন্সিপাল গুলো শিখা: সিঙ্গেল রেসপনসিবিলিটি প্রিন্সিপল, ওপেন/ক্লোস্ড প্রিন্সিপলে, লিস্কভ সাবস্টিটিউশন প্রিন্সিপল, ইন্টারফেস সেগ্রেগেশন প্রিন্সিপল, ডিপেন্ডেন্সি ইনভার্শন প্রিন্সিপল ইত্যাদি  শিখা এবং ব্যবহার করা ।

৩) OOP এর ডিজাইন প্যাটার্ন গুলো শিখা: সিঙ্গেলটন প্যাটার্ন, ফ্যাক্টরি প্যাটার্ন, অবজার্ভার প্যাটার্ন, ডেকরেট প্যাটার্ন  ইত্যাদি  শিখা এবং ব্যবহার করা ।

৪) প্রজেক্টের রিকুইরেমেন্ট এবং স্কোপ গুলো প্রপারলি বুঝা: আপনার প্রকল্পের রিকুইরেমেন্ট এবং স্কোপ সঠিকভাবে বুঝা এবং তার উপর ভিত্তি করে OOP তে ডিজাইন করা ।

----------------------------------
ডিজাইন প্রিন্সিপল কি  ?
----------------------------------
ডিজাইন প্রিন্সিপল হলো জেনারেল প্রিন্সিপল যা সফটওয়্যার ডিজাইন করার সময় ফলো করা উচিত । 

কিছু জেনারেল ডিজাইন প্রিন্সিপল হলো (SOLID):
--------------------------------
১) Single Responsibility Principle: একটি ক্লাসে শুধুমাত্র একটি রেসপনসিবিলিটি থাকা উচিত ।  উদাহরণ, ধরি  User নামে একটি  ক্লাস আছে । এই ক্লাসে শুধুমাত্র ইউসার রিলেটেড কাজ করবে । যেমন নিবন্ধন, লগইন এবং পাসওয়ার্ড রিসেট । এটি অন্যান্য কাজগুলির জন্য রেস্পন্সিবল নয়, যেমন ইমেল পাঠানো, লগ ফাইল লেখা, অ্যাক্সেস কন্ট্রোল ।

২) Open/Closed Principle: ক্লাস এক্সটেনশনের জন্য ওপেন , কিন্তু মডিফিকেশনের জন্য ক্লোস থাকা উচিত । OCP প্রিন্সিপল অনুসরণ করে ক্লাস ডিজাইন করলে প্যারেন্ট ক্লাসের কোনো পরিবর্তন ছাড়াই চাইল্ড ক্লাস এক্সটেন্ড করে নতুন আকারের ক্ষেত্রফল এবং পরিধি গণনার করতে পারবে ।

৩) Liskov Substitution Principle: একটি সাবক্লাস তার বেস ক্লাসের যেকোনো কনটেক্সট ব্যবহার করা যেতে পারে । সহজ করে বলতে গেলে, যদি কোন কোড একটি বেস ক্লাসের অবজেক্টের উপর নির্ভর করে, তাহলে সেই কোড কোনো সাবক্লাসের অবজেক্টের উপরও নির্ভর করতে পারবে ।

৪) Interface Segregation Principle: একটি বড় ইন্টারফেসকে একাধিক ছোট এবং আরও নির্দিষ্ট ইন্টারফেসে বিভক্ত করার পরামর্শ দেয় । সহজ করে বলতে গেলে, একটি ইন্টারফেসে শুধুমাত্র সেই মেথডগুলো থাকা উচিত যা একসাথে ব্যবহার করা হয় ।

৫) Dependency Inversion Principle: হায়ার লেভেল  ক্লাস লোয়ার লেভেল ক্লাস গুলোর উপর নির্ভর করবে না, বরং উভয়ই অ্যাবস্ট্রাক্ট ক্লাসের উপর নির্ভর করা উচিত ।  এতে লোয়ার লেভেল ক্লাস পরিবর্তন করা সহজ হয়, হায়ার লেভেল  ক্লাস গুলো পরিবর্তন করার প্রয়োজন হয় না।

ডিজাইন প্রিন্সিপাল ব্যবহারের কারণ:
------------------------
সফটওয়্যার কে আরও নমনীয়, পরিবর্তনযোগ্য, টেস্ট করা সহজ এবং maintainable করে তোলে।
সফটওয়্যার ডিজাইন কে আরও consistent এবং predictable করে তোলে।
সফটওয়্যার ডিজাইন করার সময় সিদ্ধান্ত নেওয়া সহজ করে তোলে।

----------------------------------
ডিজাইন প্যাটার্ন   ?
----------------------------------
ডিজাইন প্যাটার্ন হলো সফটওয়্যার ডিজাইন সমস্যা গুলো সমাধান করতে ব্যবহার করা হয়। এই প্যাটার্ন গুলো সফটওয়্যার কে আরও নমনীয়, পরিবর্তনযোগ্য এবং maintainable করে তোলে।

কিছু সাধারণ ডিজাইন প্যাটার্ন হলো:
-------------------------
১) Singleton Pattern: একটি class-এর শুধুমাত্র একটি instance তৈরি করা যায়।
২) Factory Pattern: অবজেক্ট তৈরির প্রক্রিয়া বিমূর্ত করে।
৩) Observer Pattern: অবজেক্টের পরিবর্তন সম্পর্কে অন্যান্য অবজেক্টকে অবহিত করে।
৪) Decorator Pattern: অবজেক্টের গতিশীল আচরণ পরিবর্তন করে।

ডিজাইন প্যাটার্ন ব্যবহারের কারণ:
----------------------
সাধারণ সফটওয়্যার ডিজাইন সমস্যা গুলো সমাধান করার জন্য proven সমাধান provide করে।
সফটওয়্যার ডিজাইন কে আরও reusable এবং extensible করে তোলে।
সফটওয়্যার ডিজাইন কে আরও understandable এবং communicable করে তোলে।

-----------------------------------
কিভাবে অবজেক্ট এর  মধ্যে সম্পর্ক তৈরি করতে হয় ? Not Read
-----------------------------------
https://medium.com/@bindubc/association-aggregation-and-composition-in-oops-8d260854a446

Is-A:  যখন একটি ক্লাস অন্য ক্লাস কে এক্সটেন্ড করে তাকে  Is-A রিলেশনশিপ বলে ।  একটি  অবজেক্ট অন্য অবজেক্ট উপর নির্ভরশীল । Is-a রিলেশন কেবল ক্লাসের মধ্যে, অবজেক্টের মধ্যে নয় । 
Has-A: যখন একটি ক্লাস মধ্যে অন্য  ক্লাসের অবজেক্ট /রেফারেন্স তৈরি  করে তাকে  Has-A রিলেশনশিপ বলে । একটি অবজেক্ট অন্য অবজেক্ট উপর নির্ভরশীল না । Has-a রিলেশন সরাসরি অবজেক্টের মধ্যে সম্পর্ক স্থাপন করে । 

কখন কোনটা  ব্যবহার করে ?
-------------------
is-a relation এর জন্য  inheritence.  (post class is-a author class নয় ) একটা post কিন্তু author না 
has-a relation এর জন্য  composition. (post has-a author class) একটা post এ কোনো না কোনো authorআছে   

1) Inheritance (Is-A  relationship)
2) Association (Has-A relationship) 
     !)  Composition 
     !!) Aggregation 

1) Inheritance: ইনহেরিটেন্স হলো এক ধরণের রিলেশনশিপ যেখানে একটি অবজেক্ট  অন্য অবজেক্টের মেথড এবং প্রপার্টি কে গ্রহণ করে। 

2) Association: দুটি বা ততোধিক অবজেক্টের মধ্যে সম্পর্ক স্থাপন করে বা একটি  অবজেক্ট (সমষ্টি) অন্য অবজেক্টগুলির (উপাদান) সমন্বয়ে গঠিত হয় । 
   !)  Composition: একটি অবজেক্ট অন্য অবজেক্ট উপর নির্ভরশীল ।  এই খানে  Engine না থাকলে  Car এর existence নাই  ।  
   !!) Aggregation: একটি অবজেক্ট অন্য অবজেক্ট উপর নির্ভরশীল না । এই খানে  Music Player না থাকলে   ও  Car এর  existence আছে  । 

-----------------------------------
Modularization কি  ? Not Read
-----------------------------------
Modularization হলো একটি সিস্টেম বা প্রোগ্রাম কে স্বাধীন এবং পুনঃব্যবহারযোগ্য মডিউলে বিভক্ত করার প্রক্রিয়া। Modularization সিস্টেম ডিজাইন এবং ডেভেলপমেন্ট কে সহজ করে তোলে। এটি সিস্টেম কে আরও নমনীয় এবং পরিবর্তনযোগ্য করে তোলে। বেহেবিয়ার উপর বেস করে কোড অপ্টিমাইজ  করবো।  কারণ কোড সেম থাকতে পারে কিন্তু কাজ আলাদা এই ক্ষেত্রে কোড আলাদা থাকা ভালো।

Modularization-এর কিছু গুরুত্বপূর্ণ নীতি:
------------------------------
Decoupling: মডিউল কে একে অপরের উপর নির্ভরশীল না করে তৈরি করা।
Cohesion: মডিউল কে একটি নির্দিষ্ট কার্য সম্পাদন করার জন্য তৈরি করা।
Encapsulation: মডিউল-এর internal details কে hide করা।

Modularization-এর সুবিধা:
  Code reusability: মডিউল গুলো বিভিন্ন প্রোগ্রাম এবং সিস্টেম তে পুনঃব্যবহার করা যায়।
  Code maintainability: মডিউল গুলো আলাদা আলাদা ভাবে maintain করা সহজ।
  Code testability: মডিউল গুলো আলাদা আলাদা ভাবে test করা সহজ।
  Extensibility: নতুন মডিউল যোগ করে সিস্টেম কে extend করা সহজ।

Modularization-এর অসুবিধা:
  Complexity: Modularization সিস্টেম কে আরও complex করে তুলতে পারে।
  Overhead: মডিউল গুলো between communication overhead বৃদ্ধি করতে পারে।
  Dependency management: মডিউল গুলো dependency manage করা কঠিন হতে পারে।

---------------------------------------------------
Cohesion(কোহেশন) কি  ? Not Read
---------------------------------------------------
Cohesion(সংহতি) মানে যেগুলো একই রকম তারা একসাথে থাকার প্রবণতা। সফটওয়্যার ডেভেলপমেন্ট-এর ক্ষেত্রে, কোহেশন বলতে বোঝায় একটি module, class, function, বা অন্য কোন unit-এর অংশ গুলো কতটা একে অপরের সাথে সম্পর্কিত এবং একটি নির্দিষ্ট কার্য সম্পাদন করতে কতটা যোগদান করে। 

Low Cohesion: যদি একটি unit-এর অংশ গুলো যদি একে অপরের সাথে গভীরভাবে সংযুক্ত থাকে  তাহলে তাকে  Low Cohesion বলে।  যদি ক্লাসে  আননেসেসারি রেস্পন্সিবিলিটি থাকে তাহলে তাকে  Low Cohesion বলে।   

High Cohesion: যদি  একটি unit-এর অংশ গুলো যদি একে অপরের সাথে  কম সংযুক্ত থাকে তাহলে তাকে  High Cohesion বলে।  যদি ক্লাসে  আননেসেসারি রেস্পন্সিবিলিটি না থাকে তাহলে তাকে  High Cohesion বলে।     

----------------------------------
Coupling কি  ? Not Read
----------------------------------
কাপলিং  হলো দুটি মডিউল, অবজেক্ট বা উপাদানের মধ্যে পারস্পরিক নির্ভরশীলতার পরিমাপ।

হাই  কাপলিং: একটা  মডিউল যদি অনেক গুলো মডিউলে উপর বেশি ডিপেন্ডেন্ট থাকে তাহলে তাকে হাই  কাপলিং । 
লো  কাপলিং: একটা  মডিউল যদি অনেক গুলো মডিউলে উপর কম ডিপেন্ডেন্ট থাকে তাহলে তাকে লো  কাপলিং ।  কোনো একটি ইন্টারফেস বা কম মডিউলে উপর  ডিপেন্ডেন্সি রাখবো । 

Ideal Class: High Cohesion, Losse Coupling 
 
------------------------------------------------
কম্পোজার ইনস্টল এবং কম্পোজার ডাম্প-অটোলোড মধ্যে পার্থক্য কি  ?
------------------------------------------------
কম্পোজার ইনস্টল: ---------- 
১) প্যাকেজ এবং তাদের ডিপেন্ডেন্সি ইনস্টল করে । 
২) নতুন প্যাকেজ অ্যাড এবং আপডেট করে । 
৩) ভেন্ডর ডিরেক্টরি এবং composer.lock ফাইল পরিবর্তন করে ।
৪) এভেইল্যাবল প্যাকেজ এবং তাদের ডিপেন্ডেন্সি আপডেট করে ।

কম্পোজার ডাম্প-অটোলোড: ---------- 
১) অটোমেটিক  লোডিংয়ের জন্য ক্লাস ম্যাপ তৈরি করে । 
২) ক্লাস অ্যাড করে/পরিবর্তন করে এবং প্যাকেজ কনফিগারেশন পরিবর্তন করে ।
৩) autoload_classmap.php ফাইল পরিবর্তন করে ।
৪) ক্লাস লোডিং পারফরমেন্স উন্নত করে ।



কম্পোজার অটোলোড কিভাবে কাজ করে?
------------------------------------------------
কম্পোজার অটোলোড হলো একটি ডিপেন্ডেন্সি ইনজেকশন টুল যা PHP-এর Composer প্যাকেজ ম্যানেজারের অংশ । এটি ডেভেলপারদের তাদের প্রোজেক্টে ব্যবহৃত লাইব্রেরি (Library) এবং ডিপেন্ডেন্সি (Dependency) গুলো স্বয়ংক্রিয়ভাবে লোড করতে সহায়তা করে।





